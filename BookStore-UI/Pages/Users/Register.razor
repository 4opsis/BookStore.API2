@page "/Register/"

@using BookStore_UI.Models
@using BookStore_UI.Contracts

@inject IAuthenticationRespository _authRepo
@inject NavigationManager  _navMan


<h3 class="card-title">Register now</h3>
@if (!response)
{
    <BookStore_UI.Shared.LoadingErrorMessage Message="Something went wrong with the registration" />
}
<div class="card-body">
    <EditForm Model="Model" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email address</label>
            <InputText Id="email" class="form-control" @bind-Value="Model.EmailAdress" />
            <ValidationMessage For="@(() => Model.EmailAdress)" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password" />
            <ValidationMessage For="@(() => Model.Password)" />
        </div>
        <div class="form-group">
            <label for="confirmpassword">Password confirm</label>
            <InputText Id="confirmpassword" type="password" class="form-control" @bind-Value="Model.ConfirmPassword" />
            <ValidationMessage For="@(() => Model.ConfirmPassword)" />
        </div>
        <button type="submit" class="btn btn-primary btn-block">Submit</button>
    </EditForm>
    <form action="/" method="post"></form>
</div>


@code {
    private RegistrationModel Model = new RegistrationModel();
    private bool response = true;


    private async Task HandleRegistration()
    {
        response = await _authRepo.Register(Model);
        if (response)
        {
            _navMan.NavigateTo("/login");
        }
    }
}
