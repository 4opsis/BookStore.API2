@page "/login"

@using BookStore_UI.Models
@using BookStore_UI.Contracts

@inject IAuthenticationRespository _authRepo
@inject NavigationManager  _navMan

<div class="card">
    <h3 class="card-title">Log in</h3>
    @if (!response)
    {
        <div class="alert alert-danger">
            <p>Something went wrong with the login atempt</p>
        </div>
    }
    <div class="card-body">
        <EditForm Model="Model" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" class="form-control" @bind-Value="Model.EmailAdress" />
                <ValidationMessage For="@(() => Model.EmailAdress)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password" />
                <ValidationMessage For="@(() => Model.Password)" />
            </div> 
            <button type="submit" class="btn btn-primary btn-block">Login </button>
        </EditForm>
        <form action="/" method="post"></form>
    </div>
</div>

@code {
    private LoginModel Model = new LoginModel();
    private bool response = true;
    private async Task HandleLogin()
    {
        response = await _authRepo.Login(Model);
        if (response)
        {
            _navMan.NavigateTo("/");
        }
    }
}
